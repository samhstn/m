#!/usr/bin/env zunit

@setup {
  source ./test_helper.zsh
  source ./m.zsh
  ROOT_DIR=$(pwd)
  echo "fixtures/gitignored/ignored/*" > .gitignore
}

@teardown {
  cd $ROOT_DIR
  if [ -f .gitignore ];then
    rm .gitignore
  fi
  m_reset
}

@test 'mg - no args: shows usage' {
  run mg

  assert $state equals 0
  assert "$output" contains "usage"
  assert "${#lines}" equals 5
}

@test 'mg - invalid flag: shows usage' {
  run mg -z asdf

  assert $state equals 1
  assert "$output" contains "usage"
  assert "${#lines}" equals 5
}

@test 'mg - basic strings with single file' {
  cd fixtures/basic

  run mg hello

  assert $state equals 0
  assert "$output" is_empty

  run mg two

  assert $state equals 0
  assert "${#lines}" equals 1
  assert "$output" same_as "     1	numbers.txt$(cyan :)$(red two)"

  run mg teen

  assert $state equals 0
  assert "${#lines}" equals 3
  assert "     1	numbers.txt$(cyan :)thir$(red teen)" in "$output"
  assert "     2	numbers.txt$(cyan :)four$(red teen)" in "$output"
  assert "     3	numbers.txt$(cyan :)fif$(red teen)" in "$output"
}

@test 'mg - nested deeply files' {
  cd fixtures/nested

  run mg hello

  assert $state equals 0
  assert "${#lines}" equals 2
  assert "     1	dir1/dir2/dir3/hello.txt$(cyan :)dir3$(red hello)" in "$output"
  assert "     2	dir1/hello.txt$(cyan :)dir1$(red hello)" in "$output"
}

@test 'mg - gitignored dirs' {
  cd fixtures/gitignored

  run mg hello

  assert $state equals 0
  assert "${#lines}" equals 1
  assert "$output" same_as "     1	not_ignored/not_ignored.txt$(cyan :)$(red hello) not ignored"
}

@test 'mg - very long lines are filtered' {
  cd fixtures/basic

  run mg one

  assert $state equals 0
  assert "${#lines}" equals 2
  assert "$output" matches '     1	long_lines.txt.*:.*\.{100}.*one.*'
  assert "     2	numbers.txt$(cyan :)$(red one)" in "$output"
}

@test 'mg - case insensitive' {
  cd fixtures/basic

  run mg three

  assert $state equals 0
  assert "${#lines}" equals 7
  assert "     1	cases.txt$(cyan :)$(red three)" in "$output"
  assert "     2	cases.txt$(cyan :)$(red Three)" in "$output"
  assert "     3	cases.txt$(cyan :)$(red tHree)" in "$output"
  assert "     4	cases.txt$(cyan :)$(red thRee)" in "$output"
  assert "     5	cases.txt$(cyan :)$(red thrEe)" in "$output"
  assert "     6	cases.txt$(cyan :)$(red threE)" in "$output"
  assert "     7	numbers.txt$(cyan :)$(red three)" in "$output"
}

@test 'mg - smartcase' {
  cd fixtures/basic

  run mg Three

  assert $state equals 0
  assert "${#lines}" equals 1
  assert "     1	cases.txt$(cyan :)$(red Three)" in "$output"
}

@test 'mg -c - case sensitive' {
  cd fixtures/basic

  run mg -c three

  assert $state equals 0
  assert "${#lines}" equals 2
  assert "     1	cases.txt$(cyan :)$(red three)" in "$output"
  assert "     2	numbers.txt$(cyan :)$(red three)" in "$output"
}

@test 'mg -h - suppress files' {
  cd fixtures/basic

  run mg -h two

  assert $state equals 0
  assert "${#lines}" equals 1
  assert "$output" same_as "     1	$(red two)"
}

@test 'mg -l - only file names' {
  cd fixtures/basic

  run mg -l two

  assert $state equals 0
  assert "${#lines}" equals 1
  assert "$output" same_as "     1	numbers.txt"
}

@test 'mg -n - suppress numbers' {
  cd fixtures/basic

  run mg -n two

  assert $state equals 0
  assert "${#lines}" equals 1
  assert "$output" same_as "numbers.txt$(cyan :)$(red two)"
}

@test 'mg -cn - case sensitive and suppress numbers' {
  cd fixtures/basic

  run mg -cn three

  assert $state equals 0
  assert "${#lines}" equals 2
  assert "cases.txt$(cyan :)$(red three)" in "$output"
  assert "numbers.txt$(cyan :)$(red three)" in "$output"
}

@test 'mg -c -n - case sensitive and suppress numbers' {
  cd fixtures/basic

  run mg -c -n three

  assert $state equals 0
  assert "${#lines}" equals 2
  assert "cases.txt$(cyan :)$(red three)" in "$output"
  assert "numbers.txt$(cyan :)$(red three)" in "$output"
}

@test 'mg pattern -v exclude_patterns - exclude pattern' {
  cd fixtures/basic

  run mg teen -v four -v fifteen

  assert $state equals 0
  assert "${#lines}" equals 1
  assert "$output" same_as "     1	numbers.txt$(cyan :)thir$(red teen)"
}

@test 'mg works with regex' {
  cd fixtures/basic

  run mg '^...teen'

  assert "$output" same_as "     1	numbers.txt$(cyan :)$(red fifteen)"
}

@test 'mg multi words' {
  cd fixtures/basic

  run mg 'are four'

  assert "$output" same_as "     1	spaces.txt$(cyan :)These $(red 'are four') words."
}
